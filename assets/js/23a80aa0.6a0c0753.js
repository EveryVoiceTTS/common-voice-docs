"use strict";(self.webpackChunkcommon_voice_docs=self.webpackChunkcommon_voice_docs||[]).push([[35],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return s}});var a=n(7294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var p=a.createContext({}),o=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=o(t.components);return a.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,p=t.parentName,m=d(t,["components","mdxType","originalType","parentName"]),c=o(n),s=l,g=c["".concat(p,".").concat(s)]||c[s]||u[s]||r;return n?a.createElement(g,i(i({ref:e},m),{},{components:n})):a.createElement(g,i({ref:e},m))}));function s(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,i=new Array(r);i[0]=c;var d={};for(var p in e)hasOwnProperty.call(e,p)&&(d[p]=e[p]);d.originalType=t,d.mdxType="string"==typeof t?t:l,i[1]=d;for(var o=2;o<r;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4627:function(t,e,n){n.r(e),n.d(e,{assets:function(){return m},contentTitle:function(){return p},default:function(){return s},frontMatter:function(){return d},metadata:function(){return o},toc:function(){return u}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),i=["components"],d={},p="Changing the Audio Format",o={unversionedId:"audio",id:"audio",title:"Changing the Audio Format",description:"To change the audio codec, the format & the sample rate, you have to add the following lines to .env-local-docker which is located at the root of the repository.",source:"@site/docs/audio.md",sourceDirName:".",slug:"/audio",permalink:"/common-voice-docs/docs/audio",editUrl:"https://github.com/joanise/common-voice-docs/tree/main/docs/audio.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction to NRC's Common Voice project and fork",permalink:"/common-voice-docs/docs/intro"},next:{title:"Auth0",permalink:"/common-voice-docs/docs/auth0"}},m={},u=[{value:"Available Lossless Audio Codecs",id:"available-lossless-audio-codecs",level:2},{value:"Available Formats",id:"available-formats",level:2},{value:"S3 File Name",id:"s3-file-name",level:2}],c={toc:u};function s(t){var e=t.components,n=(0,l.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"changing-the-audio-format"},"Changing the Audio Format"),(0,r.kt)("p",null,"To change the audio codec, the format & the sample rate, you have to add the following lines to ",(0,r.kt)("inlineCode",{parentName:"p"},".env-local-docker")," which is located at the root of the repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CV_TRANSCODE_CODEC='pcm_s16le'\nCV_TRANSCODE_FORMAT='wav'\nCV_TRANSCODE_SAMPLE_RATE='44100'\n")),(0,r.kt)("h2",{id:"available-lossless-audio-codecs"},"Available Lossless Audio Codecs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ffmpeg -codecs |& grep ".EA..S"\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'docker container exec -it web ffmpeg -codecs |& grep ".EA..S"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker container exec -it web ffmpeg -codecs \\\n |& grep \".EA..S\" \\\n | sed -e 's| \\([^ ]\\+\\) \\([^ ]\\+\\) \\+\\(.\\+\\)|\\1\\t\\2\\t\\3|' \\\n | tabulate --sep $'\\t' --format pipe\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attributes"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"alac"),(0,r.kt)("td",{parentName:"tr",align:null},"ALAC (Apple Lossless Audio Codec)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA.LS"),(0,r.kt)("td",{parentName:"tr",align:null},"dts"),(0,r.kt)("td",{parentName:"tr",align:null},"DCA (DTS Coherent Acoustics) (decoders: dca ) (encoders: dca )")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"flac"),(0,r.kt)("td",{parentName:"tr",align:null},"FLAC (Free Lossless Audio Codec)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"mlp"),(0,r.kt)("td",{parentName:"tr",align:null},"MLP (Meridian Lossless Packing)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_f32be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM 32-bit floating point big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_f32le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM 32-bit floating point little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_f64be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM 64-bit floating point big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_f64le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM 64-bit floating point little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s16be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 16-bit big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s16be_planar"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 16-bit big-endian planar")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s16le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 16-bit little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s16le_planar"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 16-bit little-endian planar")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s24be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 24-bit big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s24daud"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM D-Cinema audio signed 24-bit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s24le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 24-bit little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s24le_planar"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 24-bit little-endian planar")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s32be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 32-bit big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s32le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 32-bit little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s32le_planar"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 32-bit little-endian planar")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s64be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 64-bit big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s64le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 64-bit little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s8"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 8-bit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_s8_planar"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM signed 8-bit planar")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_u16be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM unsigned 16-bit big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_u16le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM unsigned 16-bit little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_u24be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM unsigned 24-bit big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_u24le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM unsigned 24-bit little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_u32be"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM unsigned 32-bit big-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_u32le"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM unsigned 32-bit little-endian")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"pcm_u8"),(0,r.kt)("td",{parentName:"tr",align:null},"PCM unsigned 8-bit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"s302m"),(0,r.kt)("td",{parentName:"tr",align:null},"SMPTE 302M")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"truehd"),(0,r.kt)("td",{parentName:"tr",align:null},"TrueHD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA..S"),(0,r.kt)("td",{parentName:"tr",align:null},"tta"),(0,r.kt)("td",{parentName:"tr",align:null},"TTA (True Audio)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DEA.LS"),(0,r.kt)("td",{parentName:"tr",align:null},"wavpack"),(0,r.kt)("td",{parentName:"tr",align:null},"WavPack (encoders: wavpack libwavpack )")))),(0,r.kt)("h2",{id:"available-formats"},"Available Formats"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ffmpeg -formats\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker container exec -it web ffmpeg -formats\n")),(0,r.kt)("h2",{id:"s3-file-name"},"S3 File Name"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"server/src/lib/clip.ts"),":",(0,r.kt)("inlineCode",{parentName:"p"},"saveClip()"),"\nSaving the audio content on S3."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"   const { client_id, headers } = request;\n   const sentenceId = headers.sentence_id as string;\n\n   const folder = client_id + '/';\n   const filePrefix = sentenceId;\n   const clipFileName = folder + filePrefix + '.' + config.TRANSCODE.FORMAT;\n\n   await this.s3\n     .upload({\n       Bucket: config.CLIP_BUCKET_NAME,\n       Key: clipFileName,\n       Body: audioOutput,\n     })\n     .promise();\n")),(0,r.kt)("p",null,"I think utterances are identified by a ",(0,r.kt)("inlineCode",{parentName:"p"},"client_id + sentenceId"),".\nThe recording are saved in a bucket and there metadata in a database.\n",(0,r.kt)("inlineCode",{parentName:"p"},"this.model.db.clipExists(client_id, sentenceId)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    await this.model.saveClip({\n      client_id: client_id,\n      localeId: sentence.locale_id,\n      original_sentence_id: sentenceId,\n      path: clipFileName,\n      sentence: sentence.text,\n    });\n")))}s.isMDXComponent=!0}}]);